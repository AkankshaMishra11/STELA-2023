List<String> expNo = [
  "1",
  "2",
  "3",
  "4(a)",
  "4(b)",
  "5",
  "6",
  "7",
  "8(a)",
  "8(b)",
  "9",
  "10",
  "11",
  "12",
  "13",
  "14",
  "15",
  "16",
  "17",
  "18",
  "19",
  "20"
];

List<String> aim = [
  "Write prolog program for solving Tower of Hanoi Problem.",
  "Write a Prolog program for solving Monkey-Banana Problem. A hungry monkey is in a room, and he is near the door. The monkey is on the floor. Bananas have been hung from the center of the ceiling of the room. There is a block (or chair) present in the room near the window. The monkey wants the banana, but cannot reach it. How Monkey can get the Banana?",
  "Write a prolog program for your own family tree.",
  "Write a LISP function to compute the nth Fibonacci number.",
  "Write a LISP Program to implement Pattern Matching.",
  "Solve Farmer, wolf, goat and cabbage problem using LISP.",
  "Perform operations on Vector and Matrix using R Programming.",
  "Perform operations on Lists, Factors and Data frames using R Programming.",
  "Write an R command for displaying the given pie chart and bar chart.",
  "Flow control Statements:\n1. Write a R Program to display multiplication table using for loop.\n2. Write a R Program to Check whether the given number is Armstrong number/not using while loop.\n3. Write a R Program to check whether the given year is leap year/not.",
  "Use airquality dataset to:\ni) Create R boxplot with Notch for the columns Ozone and Month.\nii) Create Scatter Plot matrices with four variables : Ozone, Wind, Temp, Month,",
  "Write a program to perform Web Scraping by connecting R to Web Data and built a connection to a web page through URL Connection.",
  "1. Write a Python program to count the number of characters (character frequency) in a string.\n2. Write a Python function that takes a list of words and return the longest word and the length of the longest one.",
  "1. Write a Python program to convert temperatures Celsius to Fahrenheit.\n2. Write a Python program to convert temperatures Fahrenheit to Celsius.",
  "Write a python function that prints out the first n rows of pascal's triangle.",
  "Write a python program to add two given lists using map and lambda.",
  "Write a Python program to write a list of content to a file.",
  "Write a python program to demonstrate the use of classes and objects.",
  "Classify the images of MNIST Fashion dataset by using tensorflow.",
  "Pick up any dataset and train your model using tensorflow library with maximum 6 hidden layers.",
  "Classify the images of MNIST Fashion dataset by using pytorch.",
  "Creating database using python and save it on your desktop."
];

List<String> procedure = [
  "The Tower of Hanoi (also called the Tower of Brahma or Lucas' Tower and pyramid puzzle ) is a mathematical game or puzzle consisting of three rods and a number of disks of various diameters, which can slide onto any rod. These rings are of different sizes and stacked upon in an ascending order, i.e. the smaller one sits over the larger one. We mark three towers with name, source, destination and intermediate (only to help moving the disks). The objective of the puzzle is to move the entire stack to the last rod, obeying the following rules: \n~ Only one disk can be moved among the towers at any given time. \n~ Only the \"top\" disk can be removed. \n~ No large disk can sit over a small disk. \nTower of Hanoi puzzle with n disks can be solved in minimum 2^3-1 steps. This presentation shows that a puzzle with 3 disks has taken 2^3-1 = 7 steps. To write an algorithm for Tower of Hanoi, first we need to learn how to solve this problem with lesser amount of disks. If we have only one disk, then it can easily be moved from source to destination peg. The following diagram depicts the starting setup for N=3 disks.The procedure for moving the disks when n = 3 is as follows: \n~ Move top disk from source to target \n~ Move top disk from source to intermediate \n~ Move top disk from target to intermediate \n~ Move top disk from source to target \n~ Move top disk from intermediate to source \n~ Move top disk from intermediate to target \n~ Move top disk from source to target.",
  "The monkey and banana problem is a famous toy problem in artificial intelligence, particularly in logic programming and planning. The ‘monkey world’ always is in some state that can be changed in time. The current state is determined by the positions of the objects. Monkey’s possible actions \n~ walk on the floor \n~ push the box around if it is already at the box \n~ grasp the banana if standing on the box directly under the banana \n~ climb the box \nThe following few movements can be made in this situation − \n~ Monkey can reach the block, if both of them are at the same level. Both the monkey and the block are on the floor. \n~ If the block position is not at the center, then monkey can drag it to the center. \n~ If monkey and the block both are on the floor, and block is at the center, then the monkey can climb up on the block. So the vertical position of the monkey will be changed. \n~ When the monkey is on the block, and block is at the center, then the monkey can get the bananas. \nAnother predicate will be canget(). Here we pass a state, so this will perform move predicate from one state to another using different actions, then perform canget() on state 2. When we have reached to the state ‘has>’, this indicates ‘has banana’. We will stop the execution.",
  "Relationship is one of the main features that we have to properly mention in Prolog. These relationships can be expressed as facts and rules. There are various kinds of relationships, of which some can be rules as well. A rule can find out about a relationship even if the relationship is not defined explicitly as a fact. We can define a brother relationship as follows − \nTwo person are brothers, if, \n~ A and B, both are male. \n~ They have same father. \n~ They have same mother. \n~ A and B are not same. \nProlog rule : brother(X,Y):-parent(Z,X),parent(Z,Y),male(X)",
  "In mathematics, the Fibonacci numbers, commonly denoted Fn, form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. F0 = 0, F1 = 1, and Fn = Fn-1 + Fn-2; for n > 1. The sequence is like : 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...",
  "Pattern matching is an important AI methodology. It takes two arguments as input and return T if both matches. It requires both arguments to have same data structure and identical atoms in corresponding position.",
  "A farmer with his wolf, goat, and cabbage arrive at the bank of a river. A boat at the river’s edge is only large enough for the farmer and one of his possessions. The farmer cannot leave the wolf alone with the goat, or the goat alone with the cabbage. Write a program in Lisp to help the farmer cross the river with all of his possessions intact.",
  "Vectors : Vectors are the most basic R data objects and there are six types of atomic vectors. They are logical, integer, double, complex, character and raw. We can treat a vector as a regular variable. The basic syntax of creating a vector is : v=c(1,2,3) \nMatrices : Matrices are the R objects in which the elements are arranged in a two-dimensional rectangular layout. They contain elements of the same atomic types. Though we can create a matrix containing only characters or only logical values, they are not of much use. We use matrices containing numeric elements to be used in mathematical calculations. \nA Matrix is created using the matrix() function. \nThe basic syntax for creating a matrix in R is − matrix(data, nrow, ncol, byrow, dimname). \nFollowing is the description of the parameters used − \n~ data is the input vector which becomes the data elements of the matrix \n ~ nrow is the number of rows to be created \n~ ncol is the number of columns to be created \n~ byrow is a logical clue. If TRUE then the input vector elements are arranged by row \n~ dimname is the names assigned to the rows and c",
  "Lists : Lists are the R objects which contain elements of different types like − numbers, strings, vectors and another list inside it. A list can also contain a matrix or a function as its elements. List is created using list() function. The basic syntax of creating a list is : list1=list(“red”,”green”,”blue”) \nFactors : Factors are the data objects which are used to categorize the data and store it as levels. They can store both strings and integers. They are useful in the columns which have a limited number of unique values. Like 'Male' and 'Female' True, False etc. They are useful in data analysis for statistical modeling. \nFactors are created using the factor() function by taking a vector as input. \nData Frames : A data frame is a table or a two-dimensional array-like structure in which each column contains values of one variable and each row contains one set of values from each column. \nFollowing are the characteristics of a data frame. \n~ The column names should be non-empty. \n~ The row names should be unique. \n~ The data stored in a data frame can be of numeric, factor or character type. \nEach column should contain same number of data items.",
  "Pie Chart : A pie-chart is a representation of values as slices of a circle with different colors. The slices are labeled and the numbers corresponding to each slice is also represented in the chart. In R the pie chart is created using the pie() function which takes positive  numbers as a vector input. The additional parameters are used to control labels, color, title etc. \nThe basic syntax for creating a pie-chart using the R is − pie(x, labels, radius, main, col, clockwise) Following is the description of the parameters used − \n– x is a vector containing the numeric values used in the pie chart. \n– labels is used to give description to the slices.\n– radius indicates the radius of the circle of the pie chart.(value between −1 and +1).\n – main indicates the title of the chart.\n– col indicates the color palette. \n– clockwise is a logical value indicating if the slices are drawn clockwise or anti clockwise. \nBar Chart : A bar chart represents data in rectangular bars with length of the bar proportional to the value of the variable. R uses the function barplot() to create bar charts. R can draw both vertical and horizontal bars in the bar chart. In bar chart each of the bars can be given different colors. \nThe basic syntax to create a bar-chart in R is − barplot(H, xlab, ylab, main, names.arg, col) \nFollowing is the description of the parameters used − \n– H is a vector or matrix containing numeric values used in bar chart. \n– xlab is the label for x axis. – ylab is the label for y axis. – main is the title of the bar chart. – names.arg is a vector of names appearing under each bar. – col is used to give colors to the bars in the graph.",
  "For Loop : A For loop is a repetition control structure that allows you to efficiently write a loop that needs to execute a specific number of times. \nThe basic syntax for creating a for loop statement in R is \nfor(value in vector){ Statements } \nR’s for loops are particularly flexible in that they are not limited to integers, or even numbers in the input. We can pass character vectors, logical vectors, lists or expressions. \nWhile Loop : The While loop executes the same code again and again until a stop condition is met. \nThe basic syntax for creating a while loop in R is \nwhile(test_expression){ Statements } \nHere key point of the while loop is that the loop might not ever run. When the condition is tested and the result is false, the loop body will be skipped and the first statement after the while loop will be executed.",
  "Boxplot : Boxplots are a measure of how well distributed is the data in a data set. It divides the data set into three quartiles. This graph represents the minimum, maximum, median, first quartile and third quartile in the data set. The basic syntax to create a boxplot in R is − boxplot(x, data, notch, varwidth, names, main) \nFollowing is the description of the parameters used − \n– x is a vector or a formula \n– data is the data frame.\n– notch is a logical value. Set as TRUE to draw a notch. \n– varwidth is a logical value. Set as true to draw width of the box proportionate to the sample size. \n– names are the group labels which will be printed under each boxplot. \n– main is used to give a title to the graph. \nScatterplot Matrices : When we have more than two variables and we want to find the correlation between one variable versus the remaining ones we use scatterplot matrix. We use pairs() function to create matrices of scatterplots. \nSyntax: pairs(formula, data) \nFollowing is the description of the parameters used \n− formula represents the series of variables used in pairs. Data represents the data set from which the variables will",
  "Connectin R to Web Data: Many websites provide data for consumption by its users. For example, the WHO provides reports on health and medical information in the form of CSV, txt and XML files. Using R programs, we can programmatically extract specific data from such websites. Packages Used to scrap data from web – rvest, dplyr . They are used to connect to the URL’s, identify required links for the files and download them to the local environment. \nConnection to a Webpage using URL Connection : The readLines() function can be useful for reading in lines of webpages. Since web pages are basically text files that are stored on a remote server, there is conceptually not much difference between a web page and a local text file. The url() function creates a url connection to a web server.",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  ""
];

List<String> algorithm = [
  "\nStep 1 − Move n-1 disks from source to intermediate\nStep 2 − Move nth disk from source to target\nStep 3 − Move n-1 disks from intermediate to target",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
];

List<String> program = [
  "move(1,S,T,_) :- \nwrite('Move top disk from '), write(S), write(' to '), write(T), nl. \nmove(N,S,T,I) :- \nN>1, M is N-1, \nmove(M,S,I,T), \nmove(1,S,T,_), \nmove(M,I,T,S).",
  "move(state(middle,onbox,middle,hasnot), \ngrasp, \nstate(middle,onbox,middle,has)). \nmove(state(P,onfloor,P,H), \nclimb, \nstate(P,onbox,P,H)). \nmove(state(P1,onfloor,P1,H), \npush(P1,P2), \nstate(P2,onfloor,P2,H)). \nmove(state(P1,onfloor,B,H), \nwalk(P1,P2), \nstate(P2,onfloor,B,H)). \ncanget(state(_,_,_,has)). \ncanget(State1) :- \nmove(State1,_,State2), \ncanget(State2).",
  "male(ramesh). \nmale(navneet). \nmale(tanmay). \nfemale(saroj). \nfemale(poonam). \nfemale(saumya). \nparent(ramesh,navneet). \nparent(navneet,tanmay). \nparent(saroj,navneet). \nparent(poonam,tanmay). \nparent(navneet,saumya). \nparent(poonam,saumya). \ngrandparent(X,Y):-parent(X,Z),parent(Z,Y). \ngrandfather(X,Z):-father(X,Y),parent(Y,Z). \ngrandmother(X,Z):-mother(X,Y),parent(Y,Z). \nmother(X,Y):-parent(X,Y),female(X). \nfather(X,Y):-parent(X,Y),male(X). \nbrother(X,Y):-parent(Z,X),parent(Z,Y),male(X),X\==Y. \nsister(X,Y):-parent(Z,X),parent(Z,Y),female(X),X\==Y. \nwife(X,Y):-parent(X,Z),parent(Y,Z),female(X),male(Y)",
  "(defun fibonacci (N) \n'Compute for the Nth Fibonacci Number.' \n(if (or (zerop N) (= N 1))\n1\n(let \n((F1 (fibonacci (- N 1))) \n(F2 (fibonacci (- N 2)))) \n(+ F1 F2)))) \n(print (fibonacci 5)",
  "(defun match (pattern1 pattern2) \n(cond \n( \n(or (atom pattern1) (atom pattern2)) \n(match-atom pattern1 pattern2) \n) \n(t (and (match (car pattern1) (car pattern2)) \n(match (cdr pattern1) (cdr pattern2)) \n)))) \n\n(defun match-atom (pattern1 pattern2) \n(or (equal pattern1 pattern2) \n(variable-p pattern1) \n(variable-p pattern2) \n)) \n(defun variable-p (x) (equal x '?)) \n(write (match '(likes bill wine) '(likes bill wine))) \n(terpri) \n(write (match '(likes bill wine) '(likes bill milk))) \n(terpri) \n(write (match '(likes bill ?) '(likes bill wine))) \n(terpri) \n(write (match '(likes ? wine) '(likes bill ?))) \n(terpri) \n(write (match '(likes bill ?) '(likes bill (prolog lisp smalltalk)))) (terpri) (write (match '(likes ?) '(likes bill wine)))",
  "(defun solve-fwgc (state goal) (path state goal nil)) \n\n;;; The recursive path algorithm searches the space in a depth first \n;;; fashion. \n(defun path (state goal been-list) \n(cond ((null state) nil) \n((equal state goal) (reverse (cons state been-list))) \n((not (member state been-list :test #'equal)) \n(or (path (farmer-takes-self state) goal (cons state been-list)) \n(path (farmer-takes-wolf state) goal (cons state been-list)) \n(path (farmer-takes-goat state) goal (cons state been-list)) \n(path (farmer-takes-cabbage state) goal (cons state been-list))))))  \n\n;;; These functions define legal moves in the state space. The take \n;;; a state as argument, and return the state produced by that operation. \n\n(defun farmer-takes-self (state) \n(safe (make-state (opposite (farmer-side state)) \n(wolf-side state) \n(goat-side state) \n(cabbage-side state)))) \n\n(defun farmer-takes-wolf (state) \n(cond ((equal (farmer-side state) (wolf-side state)) \n(safe (make-state (opposite (farmer-side state)) \n(opposite (wolf-side state)) \n(goat-side state) \n(cabbage-side state)))) \n(t nil))) \n\n(defun farmer-takes-goat (state) \n(cond ((equal (farmer-side state) (goat-side state)) \n(safe (make-state (opposite (farmer-side state)) \n(wolf-side state) \n(opposite (goat-side state)) \n(cabbage-side state)))) \n(t nil))) \n\n(defun farmer-takes-cabbage (state) \n(cond ((equal (farmer-side state) (cabbage-side state)) \n(safe (make-state (opposite (farmer-side state)) \n(wolf-side state) \n(goat-side state) \n(opposite (cabbage-side state))))) \n(t nil))) \n\n;;; These functions define states of the world \n;;; as an abstract data type. \n\n(defun make-state (f w g c) (list f w g c)) \n\n(defun farmer-side ( state ) \n(nth 0 state)) \n\n(defun wolf-side ( state ) \n(nth 1 state)) (defun goat-side ( state ) \n(nth 2 state)) \n\n(defun cabbage-side ( state ) \n(nth 3 state)) \n\n;;; The function 'opposite' takes a side and returns the opposite \n;;; side of the river. \n\n(defun opposite (side) \n(cond ((equal side 'e) 'w) \n((equal side 'w) 'e))) \n\n;;; Safe returns nil if a state is not safe; it returns the state unchanged \n;;; if it is safe. \n\n(defun safe (state) \n(cond ((and (equal \n(goat-side state) (wolf-side state)) \n(not (equal (farmer-side state) (wolf-side state)))) nil) \n((and (equal (goat-side state) (cabbage-side state)) \n(not (equal (farmer-side state) (goat-side state)))) nil) \n(t state)))",
  "1. Write a R program to add two vectors of integers type with length 5.\n\nx=c(1,2,3,4,5)\ny=c(6,7,8,9,10)\nz=x+y\nz\n\n2. Write a R program to compare two vectors of integer, string type with length 6. (Hint: use relational operator)\n\nx=c(1,2,3,4,5,6)\ny=c(7,8,9,10,11,12)\nx<y\n\n3. Create a vector with length 8 and find the given functions\n~ Length\n~ Mean\n~ Sort \n~ Max\n\nv=c(1,7,4,5,3,8,6,2)\nlength(v)\nmean(v)\n\nsort(v)\nmax(v)\n\n4. Generate a vector using seq and rep function\n\nv=seq(1,20,2)\nv\nw=rep(3,6)\nw\n\n5. Create two matrices and apply cbind and rbind function\nx=matrix(1:4,2,2)\nx\ny=matrix(5:8,2,2)\ny\ncbind(x,y)\nrbind(x,y)\n\n6. Construct the following matrix and find the Eigenvalue\n\nm=c(1,4,5,9)\ndim(m)=c(2,2)\nm\neigen(m)",
  "1. If y= c(1,2,1,2,1,2,3,1, NA), What are the levels of factor(y)?\n\ny=c(1,2,1,2,1,2,3,1,NA)\nfactor(y)\n\n2. Create the following data frame and apply below operations on the data frame. \n\tName \tAge\n0 \tAlex \t19.0\n1 \tBob \t18.0\n2 \tClarke \t8.0\ni. Display summary of each variable in the data frame.\n\ndf=data.frame(Name=c(\"Alex\",\"Bob\", \"Clarke\"), Age=c(19,18,8))\ndf\nsummary(df)\nsummary(df\$Name)\nsummary(df\$Age)\n\nii. Sort the data frame on variable age.\n\ndf[order(df\$Age),]\n\niii. Remove variable (Age) from the data frame.\n\ndf=subset(df,select=-Age)\ndf\n\n3. If p<-c(2,7,4), q<-c(“A”, “B”, “C”) and y<-list(p,q), then what is the value of y[2]?\n\np=c(2,7,4)\nqec(\"A\".\"B\",\"C\")\ny=list(p,q)\ny[2]\n\n4. Create the following Data frame and apply aggregate function (sum) on the data frame.\n\ndf=data.frame(sepal.length=c(5.1,4.9,4.7,4.6,5,7,6.4,6.9,5.5,6.5,3,5.8,7.1,6.3,6.5,7.6,4.9), sepal.width=c(3.5,3,3.2,3.1,3.6,3.2,3.2,3.1,2.3,2.8,3.3,2.7,3,2.9,3,3,2.5), variety=c(\"setosa\", \“setosa\”,\"setosa\”,\"setosa\",\“setosa\",\"versicolor\",\“versicolor\",\“versicolor\”,\“versicolor\",\“versicolor\”,\“virginica\”,\“virginica\”,\"virginica\”,\“virginica\"))\ndf\naggregate(x=df\$sepal.length,by=list(df\$variety),FUN=sum)\ndf\naggregate(x=df\$sepal.width,by=list(df\$variety),FUN=sum)",
  "x<-c(4550,910,1820,2730)\npiepercent<-round(100*x/sum(x),1)\npie(x,labels=piepercent,main=\"Sport Popularity\",col=rainbow(length(x)))\nlegend(\"topright\",c(\"Soccer\",\"Surfind\",\"Lacrosse\",\"Baseball\"),cex=0.8,fill=rainbow(length(x)))\n\nH<-c(40,50,30,15,35,20)\nM<-c(\"Apple\",\"Banana\",\"Grape\",\"Kiwi\",\"Orange\",\"Pear\")\nbarplot(H,names.arg=M,xlab=\"Frits\",ylab=\"People\",col=rainbow(length(H)),main=\"Fruits Chart\")\nlegend(\"topright\",M,cex=0.8,fill=rainbow(length(H)))",
  "1. Write R Program to display multiplication table using for loop.\n\ntake input from the user \nnum = as.integer(readline(prompt = 'Enter a number '))\n# use for loop to iterate 10times\nfor(i in 1:10) {print(paste(num,'x', i, '=', num*i))}\n\n2. Write a R Program to Check whether the given number is Armstrong number/not using while loop.\n\n# take input from the user\nnum = as.integer(readline(prompt='Enter a number'))\n# initialize sum\nsum = 0\n# find the sum of the cube of each digit\ntemp = num\nwhile(num > 0) {\nrem = num %% 10\nsum = sum + (rem ^ 3)\nnum = floor(num / 10)\n}\n# display the result\nif(temp == sum) {\nprint(paste(temp, \"is an Armstrong number\"))\n} else {\nprint(paste(temp, \"is not an Armstrong number\"))\n}\n\n3. Write a R Program to check whether the given year is leap year/not using if statement.\n\nyear = as.integer(readline(prompt=\"Enter a year: \"))if((year %% 4) == 0) {if((year %% 100) == 0) {if((year %% 400) == 0) {print(paste(year,\"is a leap year\"))} else {print(paste(year,\"is not a leap year\"))}} else {print(paste(year,\"is a leap year\"))}} else {print(paste(year,\"is not a leap year\"))",
  "1. Create R boxplot with Notch for the columns Ozone and Month.\n\ninput <- airquality[,c('Ozone','Month')]print(head(input))boxplot(Temp~Month, data=airquality, main=\"Boxplot for Ozone and Month\", xlab=\"Month Number\", ylab=\"Ozone in parts per billion\", col=\"orange\", border=\"brown\", notch=TRUE)\n\n2. Create Scatter Plot matrices with four variables : Ozone, Wind, Temp, Month\n\ninput <- airquality[,c('Ozone','Wind','Temp','Month')]\nprint(head(input))\npairs(~Ozone+Wind+Temp+Month,data = airquality,main=\"Scatterplot Matrix\")",
  "#install packages\ninstall.packages(c(\"dplyr\",\"rvest\"),dependencies = TRUE)\n#load the packages\nlibrary(dplyr)\nlibrary(rvest)\nlink=\"https://www.imdb.com/search/title/?genres=thriller&groups=top_250&sort=user_rating,desc\"\npage=read_html(link)\nName=page %>% html_nodes(\".lister-item-header a\") %>% html_text()\nYear=page %>% html_nodes(\".text-muted.unbold\") %>% html_text()\nRating=page %>% html_nodes(\".ratings-imdb-rating strong\") %>%html_text()\nmovies=data.frame(Name, Year, Rating, stringsAsFactors = FALSE)\nwrite.csv(movies,\"movies.csv\")\ndata=read.csv(\"movies.csv\")\nprint(\"IMDB Best Thriller Movies\")\nprint(head(data))\nconnection=url(\"https://charubora.github.io/TestingModule2/\",\"r\")\nx=readLines(connection)\nprint(head(x))\nclose(connection)",
  "def char_frequency(str1):\ndict = {}\nfor n in str1:\nkeys = dict.keys()\nif n in keys:\ndict[n] += 1\nelse:\ndict[n] = 1\nreturn dict\nprint(char_frequency('programming tools')\n\ndef longestLength(a):\nmax1 = len(a[0])\ntemp = a[0]\n# for loop to traverse the list\nfor i in a:\nif(len(i) > max1):\nmax1 = len(i)\ntemp = i\nrint(\"The word with the longest length is:\", temp,\" and length is\", max1)\n# Driver Program \na = [\"one\", \"two\", \"third\", \"four\"]\nlongestLength(a)",
  "celsius = float(input(\"Enter temperature in celsius: \"))\nfahrenheit = (celsius * 9/5) + 32\nprint('%.2f Celsius is: %0.2f Fahrenheit' %(celsius, fahrenheit))\n\nfahrenheit = float(input(\"Enter temperature in fahrenheit: \"))\ncelsius = (fahrenheit - 32) * 5/9\nprint('%.2f Fahrenheit is: %0.2f Celsius' %(fahrenheit, celsius))",
  "def pascal_triangle(n):\ntrow = [1]\ny = [0]\nfor x in range(max(n,0)):\nprint(trow)\ntrow=[l+r for l,r in zip(trow+y, y+trow)]\nreturn n>=1\npascal_triangle(4)",
  "nums1 = [1, 3, 5]\nnums2 = [2, 4, 6]\nprint(\"Original list:\")\nprint(nums1)\nprint(nums2)\nresult = map(lambda x, y: x + y, nums1, nums2)\nprint(\"\nResult: after adding two list\")\nprint(list(result))",
  "nums1 = [1, 3, 5]\nnums2 = [2, 4, 6]\nprint(\"Original list:\")\nprint(nums1)\nprint(nums2)\nresult = map(lambda x, y: x + y, nums1, nums2)\nprint(\"\nResult: after adding two list\")\nprint(list(result))",
  "class Student:\ndef __init__(self, r, m):\nself.rno = r\nself.marks = m\ndef get_data(self):\nprint(\"Marks of Roll No. {} is {}\". format(self.rno, self.marks))\nstud1 = Student(1,90)\nstud1.get_data()\nstud2 = Student(2,100)\nstud2.get_data()",
  "import tensorflow as tf\nimport numpy as np\n# Load the fashion-mnist pre-shuffled train data and test data\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.fashion_mnist.load_data()\nprint(\"x_train shape:\", x_train.shape, \"y_train shape:\", y_train.shape)\nx_train = x_train.astype('float32') / 255\nx_test = x_test.astype('float32') / 255\nmodel = tf.keras.Sequential()\n# Must define the input shape in the first layer of the neural network\nmodel.add(tf.keras.layers.Conv2D(filters=64, kernel_size=2, padding='same',\n activation='relu', input_shape=(28,28,1)))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=2))\nmodel.add(tf.keras.layers.Dropout(0.3))\nmodel.add(tf.keras.layers.Conv2D(filters=32, kernel_size=2, padding='same',\nactivation='relu')) model.add(tf.keras.layers.MaxPooling2D(pool_size=2))\nmodel.add(tf.keras.layers.Dropout(0.3))\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.5))\nmodel.add(tf.keras.layers.Dense(10,activation='softmax'))\n# Take a look at the model summary\nmodel.summary()\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(x_train, y_train, batch_size=64, epochs=10, validation_data=(x_valid, y_valid), callbacks=[checkpointer])\n# Evaluate the model on test set\nscore = model.evaluate(x_test, y_test, verbose=0) # Print test accuracy\nprint('\n', 'Test accuracy:', score[1]",
  "# importing modules\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Activation\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('clustering_gmm.csv')\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n# Cast the records into float values\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\n# normalize image pixel values by dividing by 255\ngray_scale = 255 x_train\n/= gray_scalex_test /=\ngray_scale\nprint(\"Feature matrix:\", x_train.shape)\nprint(\"Target matrix:\", x_test.shape)\nprint(\"Feature matrix:\", y_train.shape)\nprint(\"Target matrix:\", y_test.shape)\nfig, ax = plt.subplots(10, 10)k = 0\nfor i in range(10):\nfor j in range(10):\nax[i][j].imshow(x_train[k].reshape(28, 28), aspect='auto')\nk += 1\nplt.show()\nmodel = tf.keras.Sequential([ tf.keras.layers.Flatten(input_shape=(28, 28)), tf.keras.layers.Dense(256, activation='sigmoid'), tf.keras.layers.Dense(128, activation='sigmoid'), tf.keras.layers.Dense(10, activation='sigmoid'), ])\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']\nmodel.fit(x_train, y_train, epochs=10, batch_size=2000, validation_split=0.2)\nresults = model.evaluate(x_test, y_test, verbose = 0)print('test loss, test acc:', results)",
  "# import some dependencies\nimport torchvision\nimport torch\nimport torchvision.transforms as transforms\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport torch.optim as optim\nimport time\nimport torch.nn as nn\nimport torch.nn.functional as F\ntorch.set_printoptions(linewidth=120)\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport itertools\n# import data\ntrain_set = torchvision.datasets.FashionMNIST(root=\"./\", download=True, train=True,\ntransform=transforms.Compose([transforms.ToTensor ()]))\ntest_set = torchvision.datasets.FashionMNIST(root=\"./\", download=True, train=False,\ntransform=transforms.Compose([transforms.ToTensor ()]))\ndata_loader = torch.utils.data.DataLoader(train_set, batch_size=10, shuffle=True)sample = next(iter(data_loader))\nimgs, lbls = sample\n# create a grid\nplt.figure(figsize=(15,10))\ngrid = torchvision.utils.make_grid(nrow=20, tensor=imgs)\nprint(f\"image tensor: {imgs.shape}\")\nprint(f\"class labels: {lbls}\")\nplt.imshow(np.transpose(grid, axes=(1,2,0)), cmap='gray');\n# define some helper functions\ndef get_item(preds, labels): \"\"\"function that returns the accuracy of our \narchitecture\"\"\"return\npreds.argmax(dim=1).eq(labels).sum().item()\ntorch.no_grad()def get_all_preds(network, dataloader): \"\"\"function to return the number of correct predictions across data set\"\"\"all_preds = torch.tensor([])\nmodel = networkimages, labels = batch for batch in dataloader:\npreds = model(images) # get preds\nall_preds = torch.cat((all_preds, preds), dim=0)\n# join along existing axis\nreturn all_preds\ndef plot_confusion_matrix(cm, target_names, title='Confusion matrix', cmap=None, \nnormalize=True):\naccuracy = np.trace(cm) / np.sum(cm).astype('float')\nmisclass = 1 - accuracy\nif cmap is None:\ncmap = plt.get_cmap('Blues')\nplt.figure(figsize=(15, 10))\nplt.imshow(cm, interpolation='nearest', cmap=cmap)\nplt.title(title)\nplt.colorbar()\nif target_names is not None:\ntick_marks = np.arange(len(target_names))\nplt.xticks(tick_marks, target_names, rotation=45)\nplt.yticks(tick_marks, target_names)\nif normalize:\ncm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\nthresh = cm.max() / 1.5 if normalize else cm.max() / 2\nfor i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\nif normalize:\nplt.text(j, i, \"{:0.4f}\".format(cm[i, j]), horizontalalignment=\"center\", color=\"white\" if cm[i, j] > thresh else \"black\")\nelse:\nplt.text(j, i, \"{:,}\".format(cm[i, j]), horizontalalignment=\"center\", color=\"white\" if cm[i, j] > thresh else \"black\")\nplt.tight_layout()\nplt.ylabel('True label')\nplt.xlabel('Predicted label\naccuracy={:0.4f};\nmisclass={:0.4f}'.format(accuracy,misclass))\nplt.show()\n# define network\nclass Network(nn.Module): # extend nn.Module class of nndef\ninit (self):\nsuper(). init () # super class constructor\nself.conv1 = nn.Conv2d(in_channels=1, out_channels=6, kernel_size=(5,5))self.batchN1 = nn.BatchNorm2d(num_features=6)\nself.conv2 = nn.Conv2d(in_channels=6, out_channels=12, kernel_size=(5,5))self.fc1 = nn.Linear(in_features=12*4*4, out_features=120)\nself.batchN2 = nn.BatchNorm1d(num_features=120) self.fc2 =\nnn.Linear(in_features=120, out_features=60)self.out =\nnn.Linear(in_features=60, out_features=10)\ndef forward(self, t): # implements the forward method (flow of tensors)\n# hidden conv layert =\nself.conv1(t)\nt = F.max_pool2d(input=t, kernel_size=2, stride=2)t = F.relu(t)\nt = self.batchN1(t)\n# hidden conv layert =\nself.conv2(t)\nt = F.max_pool2d(input=t, kernel_size=2, stride=2)t = F.relu(t)\n# flatten\nt = t.reshape(-1, 12*4*4)t =\nself.fc1(t)\nt = F.relu(t)\nt = self.batchN2(t)t =\nself.fc2(t)\nt = F.relu(t)\n# output\nt = self.out(t)\nreturn t\ncnn_model = Network() # init model\nprint(cnn_model) # print model structure\n# let's also normalize the data for faster convergence#import data\nmean = 0.2859; std = 0.3530 # calculated using standization from the MNIST itself\nwhich we skip in this blog\ntrain_set = torchvision.datasets.FashionMNIST(root=\"./\", download=True, \ntransform=transforms.Compose([transforms.ToTensor\n(), transforms.Normalize(mean, std)\n]))\ndata_loader = torch.utils.data.DataLoader(train_set,batch_size=100, shuffle=True, num_workers=1)\noptimizer = optim.Adam(lr=0.01, params=cnn_model.parameters())\n# def train loop\nfor epoch in range(5):\nstart_time = time.time()\ntotal_correct = 0\ntotal_loss = 0\nfor batch in data_loader:\nimgs, lbls = batch\npreds = cnn_model(imgs) # get preds\nloss = F.cross_entropy(preds, lbls) # compute loss\noptimizer.zero_grad() # zero grads loss.backward() #\ncalculates gradients optimizer.step() # update the\nweights\ntotal_loss += loss.item() total_correct +=\nget_item(preds, lbls)\naccuracy = total_correct/len(train_set)\nend_time = time.time() - start_time\nprint(\"Epoch no.\",epoch+1 ,\"|accuracy: \", round(accuracy, 3),\"%\", \"|total_loss: \" ,\n total_loss, \"| epoch_duration: \", round(end_time,2),\"sec\")\n# get all preds\npred_data_loader = torch.utils.data.DataLoader(batch_size=10000, dataset=train_set, \nnum_workers=1)\nall_preds= get_all_preds(network=cnn_model, dataloader=pred_data_loader) from\nsklearn.metrics import confusion_matrix\nplot_confusion_matrix(cm=confusion_matrix(y_true=train_set.targets, y_pred=all _preds.\nargmax(1)), target_names=train_set.classes, normalize=False)\n# get all preds\ntest_pred_data_loader = torch.utils.data.DataLoader(batch_size=10000, dataset=test_set, num_workers=1)\nall_preds_test = get_all_preds(network=cnn_model, dataloader=test_pred_data_loader)\nplot_confusion_matrix(cm=confusion_matrix(y_true=train_set.targets, y_pred=all \n_preds_test.argmax(1)), target_names=test_set.classes, normalize=False)",
  "# CREATING THE TABLE\nimport sqlite3\nconn = sqlite3.connect('test.db') print(\"Opened database successfully\");\nconn.execute(''' CREATE TABLE IF NOT EXISTS team_data(team text,country text, season integer, total_goals integer);''')\nconn.commit()\nprint(\"Table created successfully\");\n# INSERTING VALUES\nconn.execute(\"INSERT INTO team_data VALUES('Real Madrid', 'Spain', 2019, 53);\")\nconn.execute(\"INSERT INTO team_data VALUES('Barcelona', 'Spain', 2019, 47);\")\nconn.execute(\"INSERT INTO team_data VALUES('Arsenal', 'UK', 2019, 52);\")\nconn.execute(\"INSERT INTO team_data VALUES('Real Madrid', 'Spain', 2018, 49);\")\nconn.execute(\"INSERT INTO team_data VALUES('Barcelona', 'Spain', 2018, 45);\")\nconn.execute(\"INSERT INTO team_data VALUES('Arsenal', 'UK', 2018, 50 );\")\nconn.commit()\nprint(\"Value Inserted successfully\");\nconn.close()"
];

List<String> result = [
  "The above program gives the required steps to move the disks from the source tower to the target tower using intermediate tower.",
  "The above program finds how monkey can get banana using programming.",
  "The above program gives the family relationship between various members of my family.",
  "The above program prints the nth fibonacci number of the fibonacci series.",
  "The above program compares two arguments and return true if they are same.",
  "The above program in Lisp is to help the farmer cross the river with all of his possessions intact.",
  "The R program successfully performs all the operations on the data types, Vectors and Matrices.",
  "The R program successfully performs all the operations on the data types, Lists, Factors and Data Frames.",
  "The R program successfully plots pie chart and bar chart with the given data.",
  "The R program successfully used both, for loop and while loop to achieve the expected outcomes.",
  "The R program successfully plots the Boxplot and Scatterplot Matrix with the given air quality dataset.",
  "The R program successfully connects to Web data and also able to read content from a url connection.",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  ""
];
